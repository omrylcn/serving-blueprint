version: '3.8'

services:
  
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - '8000:8000'
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - LOG_LEVEL=INFO
      - API_PORT=${API_PORT}
      - API_HOST=${API_HOST}

    command: uvicorn src.api.app:app --host ${API_HOST} --port ${API_PORT} --reload
    depends_on:
      - rabbitmq
      - redis
    restart: always
    networks:
      - celery-network
    volumes:
      - ./src:/app/src
      - ./config:/app/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Worker Servisleri (Model bazlı)
  text-embedding-worker-1:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - LOG_LEVEL=INFO
      - MODEL_TYPE=text_embedding
      - MODEL_KEY=10  # İlk model anahtarı
      - TASK_QUEUE= text_embedding_small_queue # model ype + model_name + queue_name
    depends_on:
      - rabbitmq
      - redis
    restart: always
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./models:/app/models
    networks:
      - celery-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # text-embedding-worker-2:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.worker
  #   environment:
  #     - RABBITMQ_HOST=rabbitmq
  #     - RABBITMQ_USER=${RABBITMQ_USER}
  #     - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
  #     - REDIS_HOST=redis
  #     - LOG_LEVEL=INFO
  #     - MODEL_TYPE=text_embedding
  #     - MODEL_KEY=11  # İkinci model anahtarı
  #   depends_on:
  #     - rabbitmq
  #     - redis
  #   restart: always
  #   volumes:
  #     - ./src:/app
  #     - ./config:/app/config
  #     - ./models:/app/models
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '1'
  #         memory: 2G


  # RabbitMQ Mesaj Kuyruğu
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - celery-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Sonuç Depolama
  redis:
    image: redis:alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis}
    networks:
      - celery-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # # İzleme Servisi (Flower)
  # flower:
  #   image: mher/flower
  #   ports:
  #     - '5555:5555'
  #   environment:
  #     - CELERY_BROKER_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672//
  #     - FLOWER_BASIC_AUTH=${FLOWER_USER}:${FLOWER_PASSWORD}
  #   depends_on:
  #     - rabbitmq
  #   restart: always


  # # Prometheus İzleme
  # prometheus:
  #   image: prom/prometheus
  #   ports:
  #     - '9090:9090'
  #   volumes:
  #     - ./config/prometheus:/etc/prometheus
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/usr/share/prometheus/console_libraries'
  #     - '--web.console.templates=/usr/share/prometheus/consoles'
  #   restart: always

  # # Grafana Görselleştirme
  # grafana:
  #   image: grafana/grafana
  #   ports:
  #     - '3000:3000'
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - ./config/grafana:/etc/grafana/provisioning
  #     - grafana_data:/var/lib/grafana
  #   restart: always
  #   depends_on:
  #     - prometheus

volumes:
  rabbitmq_data: null
  redis_data: null
  prometheus_data: null
  grafana_data: null

networks:
  celery-network:
    driver: bridge