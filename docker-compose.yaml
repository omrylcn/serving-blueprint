# docker-compose.yml
version: '3.8'

# Define the base template for all worker services
x-worker-base: &worker-base
  build:
    context: .
    dockerfile: Dockerfile.worker
  env_file:
    - .env
  volumes:
    - ./models:/app/models
    - ./config:/app/config
    - ./config/config_docker.yaml:/app/config/config.yaml # this only for docker
  depends_on:
    rabbitmq:
      condition: service_healthy
    redis:
      condition: service_healthy
  networks:
    - model-network

services:

  # api:
  #   build: 
  #     context: .
  #     dockerfile: Dockerfile.api
    
  #   command: >
  #     sh -c "uvicorn src.api.app:app 
  #     --host $${API_HOST:-0.0.0.0} 
  #     --port $${API_PORT:-8000}"

  #   ports:
  #     - "${API_PORT}:${API_PORT}"
  #   environment:
  #     - API_PORT=${API_PORT}
  #     - API_HOST=${API_HOST}
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./models:/app/models
  #     - ./config:/app/config
  #     - ./config/config_docker.yaml:/app/config/config.yaml # this only for docker
      
  #   depends_on:
  #     - rabbitmq
  #     - redis
  #  #   - celery-worker
  #   networks:
  #     - model-network

  celery-worker-candy:
    <<: *worker-base
    command: >
      sh -c "celery -A worker.celery_app worker 
      --queues=${TASK_QUEUE:-task_candy_queue}
      --loglevel=${LOG_LEVEL:-info}"
    environment:
      - MODEL_KEY=candy_v1
      - TASK_QUEUE=task_candy_queue
      - LOG_LEVEL=${LOG_LEVEL:-info}

  celery-worker-mosaic:
    <<: *worker-base
    command: >
      sh -c "celery -A worker.celery_app worker 
      --queues=${TASK_QUEUE:-task_mosaic_queue}
      --loglevel=${LOG_LEVEL:-info}"
    environment:
      - MODEL_KEY=mosaic_v1
      - TASK_QUEUE=task_mosaic_queue
      - LOG_LEVEL=${LOG_LEVEL:-info}

  celery-worker-rain-princess:
    <<: *worker-base
    command: >
      sh -c "celery -A worker.celery_app worker
      --queues=${TASK_QUEUE:-task_rain_princess_queue}
      --loglevel=${LOG_LEVEL:-info}"
    environment:
      - MODEL_KEY=rain_princess_v1
      - TASK_QUEUE=task_rain_princess_queue
      - LOG_LEVEL=${LOG_LEVEL:-info}

  flower:
    image: mher/flower
    environment:
      - CELERY_BROKER_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:${RABBITMQ_PORT}//
      - FLOWER_BASIC_AUTH=${FLOWER_USER}:${FLOWER_PASSWORD}
    command: >
      celery 
      --broker=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:${RABBITMQ_PORT}// 
      flower 
      --basic-auth=${FLOWER_USER}:${FLOWER_PASSWORD}
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - model-network

  # Message broker service
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
      - "${RABBITMQ_MANAGEMENT_PORT}:${RABBITMQ_MANAGEMENT_PORT}"
    env_file:
      - .env
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    networks:
      - model-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache and result backend service
  redis:
    image: redis:alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    env_file:
      - .env
    networks:
      - model-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ./deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - model-network    # Add this to join your existing network
    depends_on:
      - flower        


networks:
  model-network:
    driver: bridge